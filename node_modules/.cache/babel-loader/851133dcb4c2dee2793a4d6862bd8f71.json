{"ast":null,"code":"var _jsxFileName = \"/home/mohamed/Desktop/Devolop/React/nd0191-c1-myreads/starter/src/components/Menu.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { MyBooksContext } from \"../App\";\nimport propTypes from \"prop-types\";\nimport * as BooksAPI from \"./../BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Menu = ({\n  title,\n  options,\n  book\n}) => {\n  _s();\n\n  // invokes the set function from my context to give this component the ability of re-render the HOME component\n  const getBooks = useContext(MyBooksContext).getBooks; // update the book shelf with the value that user select\n\n  const UpdateBookShelf = async value => {\n    await BooksAPI.update(book, value);\n  }; // this function get invoked when user change the book shelf\n\n\n  const onHandleChange = async e => {\n    await UpdateBookShelf(e.target.value); // after update the book re-render HOME component\n\n    getBooks();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    onChange: onHandleChange,\n    defaultValue: book.shelf ? book.shelf : \"none\",\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"none\",\n      disabled: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), options.map(option => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option[\"value\"],\n        children: option[\"text\"]\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Menu, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c = Menu;\nMenu.propTypes = {\n  title: propTypes.string.isRequired,\n  options: propTypes.array.isRequired,\n  book: propTypes.object.isRequired\n};\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/home/mohamed/Desktop/Devolop/React/nd0191-c1-myreads/starter/src/components/Menu.js"],"names":["React","useContext","MyBooksContext","propTypes","BooksAPI","Menu","title","options","book","getBooks","UpdateBookShelf","value","update","onHandleChange","e","target","shelf","map","option","id","string","isRequired","array","object"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAA8B;AAAA;;AACzC;AACA,QAAMC,QAAQ,GAAGR,UAAU,CAACC,cAAD,CAAV,CAA2BO,QAA5C,CAFyC,CAGzC;;AACA,QAAMC,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACvC,UAAMP,QAAQ,CAACQ,MAAT,CAAgBJ,IAAhB,EAAsBG,KAAtB,CAAN;AACD,GAFD,CAJyC,CAOzC;;;AACA,QAAME,cAAc,GAAG,MAAOC,CAAP,IAAa;AAClC,UAAMJ,eAAe,CAACI,CAAC,CAACC,MAAF,CAASJ,KAAV,CAArB,CADkC,CAElC;;AACAF,IAAAA,QAAQ;AACT,GAJD;;AAKA,sBACE;AACE,IAAA,QAAQ,EAAEI,cADZ;AAEE,IAAA,YAAY,EAAEL,IAAI,CAACQ,KAAL,GAAaR,IAAI,CAACQ,KAAlB,GAA0B,MAF1C;AAAA,4BAIE;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,QAAQ,MAA7B;AAAA,gBACGV;AADH;AAAA;AAAA;AAAA;AAAA,YAJF,EAOGC,OAAO,CAACU,GAAR,CAAaC,MAAD,IAAY;AACvB,0BACE;AAAwB,QAAA,KAAK,EAAEA,MAAM,CAAC,OAAD,CAArC;AAAA,kBACGA,MAAM,CAAC,MAAD;AADT,SAAaA,MAAM,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KANA,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA9BD;;GAAMd,I;;KAAAA,I;AA+BNA,IAAI,CAACF,SAAL,GAAiB;AACfG,EAAAA,KAAK,EAAEH,SAAS,CAACiB,MAAV,CAAiBC,UADT;AAEfd,EAAAA,OAAO,EAAEJ,SAAS,CAACmB,KAAV,CAAgBD,UAFV;AAGfb,EAAAA,IAAI,EAAEL,SAAS,CAACoB,MAAV,CAAiBF;AAHR,CAAjB;AAKA,eAAehB,IAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { MyBooksContext } from \"../App\";\nimport propTypes from \"prop-types\";\nimport * as BooksAPI from \"./../BooksAPI\";\nconst Menu = ({ title, options, book }) => {\n  // invokes the set function from my context to give this component the ability of re-render the HOME component\n  const getBooks = useContext(MyBooksContext).getBooks;\n  // update the book shelf with the value that user select\n  const UpdateBookShelf = async (value) => {\n    await BooksAPI.update(book, value);\n  };\n  // this function get invoked when user change the book shelf\n  const onHandleChange = async (e) => {\n    await UpdateBookShelf(e.target.value);\n    // after update the book re-render HOME component\n    getBooks();\n  };\n  return (\n    <select\n      onChange={onHandleChange}\n      defaultValue={book.shelf ? book.shelf : \"none\"}\n    >\n      <option value=\"none\" disabled>\n        {title}\n      </option>\n      {options.map((option) => {\n        return (\n          <option key={option.id} value={option[\"value\"]}>\n            {option[\"text\"]}\n          </option>\n        );\n      })}\n    </select>\n  );\n};\nMenu.propTypes = {\n  title: propTypes.string.isRequired,\n  options: propTypes.array.isRequired,\n  book: propTypes.object.isRequired,\n};\nexport default Menu;\n"]},"metadata":{},"sourceType":"module"}